#define SG_PRIVATE_DEFS
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include<fftw3.h>
#include "../Headers/SG.h"
#include "../Headers/Cell.h"
#include "../Headers/Sim.h"
#include "../Headers/Face.h"
#include "../Headers/GravMass.h"
#include "../Headers/header.h"
#include "../Headers/MPIsetup.h"
struct poisson* poisson_create(struct Sim *theSim,struct MPIsetup *theMPIsetup){
	struct poisson* thePoisson=(struct poisson*)malloc(sizeof(struct poisson));
	int N_p=sim_N_global(theSim,R_DIR);
	thePoisson->N_p=N_p;
        thePoisson->zmin=sim_Nghost_max(theSim,Z_DIR);
	thePoisson->N_z=sim_N(theSim,Z_DIR)-2*sim_Nghost_max(theSim,Z_DIR);
	thePoisson->zmax=thePoisson->zmin+thePoisson->N_z;
	if(mpisetup_check_rin_bndry(theMPIsetup)){
		thePoisson->rmin=0;
		thePoisson->N_r=sim_N(theSim,R_DIR)-2*sim_Nghost_max(theSim,R_DIR)+1;}
	else{
		thePoisson->rmin=1;
		thePoisson->N_r=sim_N(theSim,R_DIR)-2*sim_Nghost_max(theSim,R_DIR);
	}
	//make sure N_r and  N_z are the same for all the procs.
	thePoisson->rmax=thePoisson->rmin+thePoisson->N_r;
        thePoisson->z_size=mpisetup_diim_Numprocs(theMPIsetup,Z_DIR);	
	thePoisson->r_size=mpisetup_diim_Numprocs(theMPIsetup,R_DIR);
	thePoisson->N_r_glob=thePoisson->r_size*thePoisson->N_r;	
	thePoisson->N_z_glob=thePoisson->z_size*thePoisson->N_z;
	thePoisson->size=mpisetup_NumProcs(theMPIsetup);
	thePoisson->dr=sim_FacePos(theSim,1,R_DIR)-sim_FacePos(theSim,0-1,R_DIR);
 	//make sure dr is the same for all the procs in the first step


	thePoisson->N_k=thePoisson->N_p/thePoisson->size;//N_p can be divided by size (at current stage)
	thePoisson->densityold=(double *)malloc(sizeof(double)*thePoisson->N_p);
	thePoisson->density=(double *)malloc(sizeof(double)*thePoisson->N_p*thePoisson->N_r*thePoisson->N_z);
	thePoisson->buffer=(double *)malloc(sizeof(double)*thePoisson->N_p*thePoisson->N_r*thePoisson->N_z);
	if(thePoisson->N_r_glob>=thePoisson->N_z_glob)
		thePoisson->shortbuffer=(double *)malloc(sizeof(double)*thePoisson->N_r_glob);
	else
		thePoisson->shortbuffer=(double *)malloc(sizeof(double)*thePoisson->N_z_glob);
//	printf("%d   %d   %d\n"	,thePoisson->N_r,thePoisson->N_z,thePoisson->N_p);
//	thePoisson->fft_com=(fftw_complex*) fftw_malloc(sizeof(fftw_complex)*(thePoisson->N_p/2));
//require same size before after fft,so N_p is even.
	thePoisson->freq=(double *)malloc(sizeof(double)*N_p);
	
	int i=0;
	for(i=0;i<N_p;i++){
		if(i<=N_p/2)		
			thePoisson->freq[i]=i;	
		else
			thePoisson->freq[i]=N-i;
	}
	
	return thePoisson;
}  
