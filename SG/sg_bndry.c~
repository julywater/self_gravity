#define SG_PRIVATE_DEFS\
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include<fftw3.h>
#include "../Headers/SG.h"
#include "../Headers/Cell.h"
#include "../Headers/Sim.h"
#include "../Headers/Face.h"
#include "../Headers/header.h"
void cal_r_bndry(int rbndry,int rinner,struct Sim* theSim,struct poisson* thePoisson){
		
		double *Vbndry=thePoisson->Vbndry;
		int N_p=thePoisson->N_p;
		int N_r=thePoisson->N_r;
		fftw_plan p=fftw_plan_r2r_1d(N_p, Vbndry,Vbndry,FFTW_R2HC
, FFTW_ESTIMATE);
		double rm = sim_FacePos(theSim,rbndry-1,R_DIR);
        	double rp = sim_FacePos(theSim,rbndry,R_DIR);
		double r=0.5*(rm+rp);
		for(k=thePoisson->zmin;k<thePoisson->zmax;++k){
			double zm = sim_FacePos(theSim,k-1,Z_DIR);
       			double zp = sim_FacePos(theSim,k,Z_DIR);
			double z=0.5*(zm+zp);
			for(j=0;j<sim_N_p(theSim,i) ; ++j){
				struct Cell* c=cell_single(theCells,i,j,k);
				double phi=cell_tiph(c)-0.5*cell_dphi(c);
				Vbndry[j]=getpotential(theSim,r,z,phi);}
			fftw_execute(p);
			double *rho_p=thePoisson->density+(k*N_r+rinner)*N_p;
			for(j=0;j<N_p;j++)
				rho_p+=...;
		}
		fftw_destroy_plan(p);
}
void cal_z_bndry(int zbndry,int zinner,struct Sim* theSim,struct poisson* thePoisson){
		double *Vbndry=thePoisson->Vbndry;
		int N_p=thePoisson->N_p;
		int N_r=thePoisson->N_r;
		fftw_plan p=fftw_plan_r2r_1d(N_p, Vbndry,Vbndry,FFTW_R2HC
, FFTW_ESTIMATE);
		double zm = sim_FacePos(theSim,zbndry-1,Z_DIR);
       		double zp = sim_FacePos(theSim,zinner,Z_DIR);
		double z=0.5*(zm+zp);
		for(i=thePoisson->imin;i<thePoisson->imax;++i){
			double rm = sim_FacePos(theSim,i-1,R_DIR);
        		double rp = sim_FacePos(theSim,i,R_DIR);
			double r=0.5*(rm+rp);
			for(j=0;j<sim_N_p(theSim,i) ; ++j){
				struct Cell* c=cell_single(theCells,i,j,k);
				double phi=cell_tiph(c)-0.5*cell_dphi(c);
				Vbndry[j]=getpotential(theSim,r,z,phi);}
			fftw.execute(p);
			fftw_destroy_plan(p);
                        double *rho_p=thePoisson->density+(zinner*N_r+i)*N_p;
                        for(j=0;j<N_p;j++)
                                rho_p+=...;
		}
		fftw_destroy_plan(p);
}
void set_bndry(struct Sim* theSim,struct MPIsetup* theMPIsetup,struct poisson *thePoisson){
	int i,j,k;
	i=0;
	k=0;
	j=0;
	double zmin=thePoisson->zmin;
	double zmax=thePoisson->zmax;
	double rmin=thePoisson->rmin;
	double rmax=thePoisson->rmax;
	int N_p=thePoisson->N_p
	double Vbndry=thePoisson->Vbndry;

	if(mpisetup_check_rout_bndry(theMPIsetup)){
		int rbndry=rmax;
		int rinner=rmax-1;
		cal_z_bndry(rbndry,rinner,theSim,thePoisson);
	}
	 if(mpisetup_check_ztop_bndry(theMPIsetup)){
		int zbndry=zmax;
		int zinner=zmax-1;	
		cal_z_bndry(zbndry,zinner,theSim,thePoisson);
	}
	if(mpisetup_check_top_bndry(theMPIsetup)){
		int zbndry=zmin-1;
		int zinner=zmin;
		cal_z_bndry(zbndry,zinner,theSim,thePoisson);
	}
}


  			                     

