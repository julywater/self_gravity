#define SG_PRIVATE_DEFS
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include<fftw3.h>
#include "../Headers/SG.h"
#include "../Headers/Cell.h"
#include "../Headers/Sim.h"
#include "../Headers/Face.h"
#include "../Headers/header.h"
void density_fft(struct poisson* thePoisson){
	int i,j,k;
	int N_p=thePoisson->N_p;
	int N_r=thePoisson->N_r;
	int N_z=thePoisson->N_z;
	double *rho_p=thePoisson->density;
	fftw_plan p;
//	fftw_complex *out=->thePoinsson->fft_com;
	for(k=0;k<N_z;k++)
		for(i=0;i<N_r,i++){
			p=fftw_plan_dft_r2r_1d(N_p,rho_p,rho_p,FFTW_R2HC
, FFTW_ESTIMATE);
			fftw_execute(p);
			int is=0;
			rho_p+=N_p;
			
	}
	fftw_destroy_plan(p);
}
void inverse_fft(struct poisson* thePoisson){
	int i,j,k;
        int N_p=thePoisson->N_p;
        int N_r=thePoisson->N_r;
        int N_z=thePoisson->N_z;
        double *V_p=thePoisson->density;
	fftw_plan p;
        for(k=0;k<N_z;k++)
                for(i=0;i<N_r,i++){
			p=fftw_plan_dft_r2r_1d(N_p,V_p,V_p,FFTW_HC2R, FFTW_ESTIMATE);
                        fftw_execute(p);
			int is=0;
			for(is=0;is<N_p;is++)
				V_p=V_p/N_p;
                        V_p+=N_p;
			
        }
	fftw_destroy_plan(p);
}
//density array shape phi,r,z;
