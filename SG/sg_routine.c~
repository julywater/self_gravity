#define SG_PRIVATE_DEFS\
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include<fftw3.h>
#include "../Headers/SG.h"
#include "../Headers/Cell.h"
#include "../Headers/Sim.h"
#include "../Headers/Face.h"
#include "../Headers/header.h"
struct Tridiagsys{
	double *eigenvalues;
//	double *lamba;
	double *a;
	double *b;
	double *c;
	};
void solvetridiag(double *a,double *b,double *c,double *d,double *v,int N){
	int i;	
	b[0]=b[0]/a[0];
	d[0]=d[0]/a[0];
	for(i=1;i<N;i++){
		double m=1.0/(a[i]-c[i]*b[i-1]);
		b[i]=b[i]*m;
		d[i]=(d[i]-d[i-1]*c[i])*m;}
	v[N-1]=d[N-1];	
	for(i=N-2;i>=0;i--)
		v[i]=d[i]-b[i]*v[i+1];	
	}
void solveVp(int rank,struct Tridiagsys *trig,struct poisson* thePoisson){
	int i,j,k;
	int N_r_glob=thePoisson->N_r_glob;
	int N_k=thePoisson->N_k;
	int N_z_glob=thePoisson->N_z_glob;
	for(j=0;j<N_k;j++)
		double n=thePoisson->freq[thePoisson->k_start+j];
		for(k=0;k<N_z_glob;k++){
			for(i=0;i<N_r_glob;i++){
				double lambai=1.0/(2*(i+1)-1)
				trig->a[i]=trig->eigenvalues[k]-4.0*pow(n,2)*pow(lambai,2);
				trig->b[i]=1.0+1.0/(2*(k+1)-1);
				D_buf[i]=data[in_lookup(thePoisson,k,i,j)]*pow(thePoisson->dr,2);
			}
			solvetridiag(trig->a,trig->b,trig->c,D_buf,V_buf,N_r_glob);
			for(i=0;i<N_r_glob;i++)
				data[in_lookup(thePoisson,k,i,j)]=V_buf[i];
	}
}
int in_lookup(struct poisson *thePoisson,int k,int i,int j){
	double *data=thePoisson->density;
	int p=i/thePoisson->N_r;
	int q=k/thePoisson->N_z;
	int rank=p*thePoisson->z_size+q;
	ip=i-p*thePoisson->N_r;
	kp=k-q*thePoisson->N_z;
	int index=rank*thePoisson->N_r*thePoisson->N_z*thePoisson->N_k+(k*thePoisson->N_r+i)*thePoisson->N_k+j;
	return index;
}

void sinetransform(struct poisson* thePopisson){
	double *in=thePoisson->density;
	fftw_plan p;
	int N_z=thePoisson->N_z_glob;
	int N_r=thePoisson->N_r_glob;
	int N_k=thePoisson->N_k;
	int M=N_r*N_k;
	double uni=sqrt(0.5*(N_element+1));
	for(j=0;j<N_k;j++)
	for(i=0;i<N_r_glob;i++){
		for(k=0;k<N_z_glob;k++)
			in_buf[k]=in[in_lookup(thePoisson,k,i,j)];
		p=fftw_plan_r2r_1d(N_z, in_buf,out_buf,FFTW_RODFT00,FFTW_ESTIMATE);
		fftw_execute(p);
		for(k=0;k<N_z_glob;k++)
			in[in_lookup(thePoisson,k,i,j)]=out_buf/2.0/uni;
	}
	fftw_destroy_plan(p);
	
//nnote: in and out should have the same size;same size after sine transform
	}
void mpi_arrange(double *in,double * out,struct poisson *thePoisson){
	int i,k;
	for(j=0;j<thePoisson->size;j++)
	for(k=0;k<thePoisson->N_z;z++)
		for(i=0;i<thePoisson->N_r;i++){
			int in_index=(k*thePoisson->N_r+i)*thePoisson->N_p+j*thePoisson->N_k;
			int out_index=j*(thePoisson->N_r*thePoisson->N_z*thePoisson->N_k)+(k*thePoisson->N_r+i)*thePoisson->N_k;
			//or out+=N_k
			int is=0;
			for(is=0;is<N_k;is++)
				out[out_index+is]=in[in_index+is];
	}
}
void inverse_mpi_arrange(double *in,double* out,struct poisson *thePoisson){
	int i,k;
	for(j=0;j<thePoisson->size;j++)
	for(k=0;k<thePoisson->N_z;z++)
		for(i=0;i<thePoisson->N_r;i++){
			int out_index=(k*thePoisson->N_r+i)*thePoisson->N_p+j*thePoisson->N_k;
			int in_index=j*(thePoisson->N_r*thePoisson->N_z*thePoisson->N_k)+(k*thePoisson->N_r+i)*thePoisson->N_k;
			//or out+=N_k
			int is=0;
			for(is=0;is<N_k;is++)
				out[out_index+is]=in[in_index+is];
	}
}
int alloc_tridiagsys(struct Tridiagsys *tri,struct poisson * thePoisson){
	int N_x=thePoisson->N_r_glob;
	int N_y=thePoisson->N_z_glob;
	tri->eigenvalues=(double *)malloc(sizeof(double)*Ny);
//	tri->lamba=(double *)malloc(sizeof(double)*Nx);
	tri->a=(double *)malloc(sizeof(double)*Nx);
	tri->b=(double *)malloc(sizeof(double)*Nx);
	tri->c=(double *)malloc(sizeof(double)*Nx);
	double dr=r/Nx;
	double dz=z/Ny;
	int i;

	for(i=0;i<Ny;i++)
		tri->eigenvalues[i]=-4.0+2*cos((i+1)*Pi/(Ny+1));
	for(i=0;i<Nx;i++){
		tri->b[i]=1.0+1.0/(2*(i+1)-1);
		tri->c[i]=1.0-1.0/(2*(i+1)-1);}
	return 0;
	}

void sg_route(struct Sim *theSim,struct Cell*** theCells,struct MPIsetup *theMPIsetup,struct poisson *thePoisson){
//	struct Tridiagsys* thetridiag=alloc_tridiagsys(thePoisson);
	
	int N_r=thePoisson->N_r;
	int N_z=thePoisson->N_z;
	int N_p=thePoisson->N_p;
	int N_k=thePoisson->N_k;
	int i,j,k;
	cylinder_interp(theSim,theCells,thePoisson);
	mpi_arrange(thePoisson->density,thePoisson->buffer,thePoisson);
	double *buffersend=thePoisson->buffer;
	double *bufferstore=thePoisson->density;
	MPI_Alltoallv(buffersend,sendcnts,sdispls,MPI_DOUBLE,bufferstore,recvcnts,rdispls,MPI_DOUBLE,MPI_COMM_WORLD);
	sinefft(thePoisson);
	Solvp(thePoisson);
	sinefft(thePoisson);
	buffersend=thePoisson->density;
	bufferstore=thepoisson->buffer;
	MPI_Alltoallv(buffersend,sendcnts,sdispls,MPI_DOUBLE,bufferstore,recvcnts,rdispls,MPI_DOUBLE,MPI_COMM_WORLD);
	inverse_mpi_arrange(thePoisson->buffer,thePoisson->density,thePoisson);
	inversefft(thePoisson);
	disco_interp(theSim,theCells,thePoisson);
//	free(thetridiag);

}
